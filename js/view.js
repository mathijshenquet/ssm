// Generated by CoffeeScript 1.6.3
(function() {
  var global;

  if (typeof global === "undefined" || global === null) {
    global = window;
  }

  $("#console-out").click(function() {
    $("#console-in").focus();
    return false;
  });

  $("#console-in").keypress(function(e) {
    if (e.keyCode === 13) {
      return commandRun($(this).val());
    }
  });

  $("#src").keyup(function(e) {
    return setTimeout(View.sourceChanged, 50);
  });

  String.prototype.padl = function(str, len) {
    var padding;
    padding = Array(((len / str.length) | 0) + 1).join(str);
    return padding.substring(0, padding.length - this.length) + this;
  };

  String.prototype.divide = function(len) {
    var i, out, pieces;
    pieces = Math.ceil(this.length / len);
    out = [];
    i = 0;
    while (i < pieces) {
      out.push(this.slice(i * len, (i + 1) * len));
      i++;
    }
    return out;
  };

  Number.prototype.showHex = function() {};

  Number.prototype.showBinary = function() {
    return (this.valueOf() === 0 ? "" : this.toString(2)).padl("-", 32).divide(4).join(" ");
  };

  global.View = {
    addButton: function(name, fn) {
      var $btn;
      $btn = $("<button>" + name + "</button>");
      $("#ctrl").append($btn);
      return $btn.click(fn);
    },
    showPC: function(nr) {
      var $pc;
      $pc = $("#pc");
      if (nr === false) {
        return $pc.hide();
      } else {
        return $pc.animate({
          top: "" + ((nr * 20) + 8) + "px"
        }, 200).show();
      }
    },
    getSrc: function() {
      return $("#src")[0].textContent;
    },
    print: function(thing) {
      var $out;
      console.log(thing);
      $out = $("#console-out");
      $out.append(thing).append("<hr />");
      return $out[0].scrollTop = $out[0].scrollHeight;
    },
    update: function(cpu) {
      this.showPC(cpu.lineNr);
      this.showMem(cpu, ["hex", "int", "label", "annotation", "binary"]);
      return this.showRegs(cpu, ["hex", "int", "label", "annotation", "binary"]);
    },
    showChar: function(cp) {
      if (cp < 32) {
        switch (cp) {
          case 0:
            return void 0;
          case 10:
            return "\\n";
          case 13:
            return "\\r";
          case 9:
            return "\\t";
          default:
            return "\\" + cp;
        }
      } else {
        return String.fromCharCode(cp);
      }
    },
    memoryViews: {
      hex: function(bank, addr) {
        var nr;
        nr = bank.raw[addr];
        return (nr === 0 ? "" : nr.toString(16)).padl("-", 8).divide(2).join(" ");
      },
      binary: function(bank, addr) {
        var nr;
        nr = bank.raw[addr];
        return (nr === 0 ? "" : nr.toString(2)).padl("-", 32).divide(4).join(" ");
      },
      int: function(bank, addr) {
        return bank.int[addr];
      },
      float: function(bank, addr) {
        return bank.float[addr];
      },
      label: function(bank, addr) {
        var _ref;
        return (_ref = bank.label[addr]) != null ? _ref : "";
      },
      annotation: function(bank, addr) {
        var _ref, _ref1, _ref2, _ref3;
        return "<span style=color:" + ((_ref = (_ref1 = bank.annote[addr]) != null ? _ref1.color : void 0) != null ? _ref : "inherit") + ";>" + ((_ref2 = (_ref3 = bank.annote[addr]) != null ? _ref3.text : void 0) != null ? _ref2 : "") + "</span>";
      },
      char: function(bank, addr) {
        var _ref, _ref1;
        return "" + ((_ref = this.showChar(bank.u16[addr * 2 + 1])) != null ? _ref : "") + ((_ref1 = this.showChar(bank.u16[addr * 2])) != null ? _ref1 : "\\0");
      }
    },
    memoryBankRow: function(bank, addr, rows) {
      var $row, annotation, row, rowspan, _i, _len, _ref, _ref1, _ref2;
      $row = $("<tr />");
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        rowspan = 1;
        if (row === "annotation") {
          if ((_ref = bank.annote[addr]) != null ? _ref.ignore : void 0) {
            continue;
          }
          annotation = (_ref1 = bank.annote[addr]) != null ? _ref1.text : void 0;
          if (annotation != null) {
            while (((_ref2 = bank.annote[addr + rowspan]) != null ? _ref2.text : void 0) === annotation) {
              bank.annote[addr + rowspan].ignore = true;
              rowspan++;
            }
          }
        }
        $row.append($("<td rowspan=" + rowspan + " class='mem_" + row + " " + (rowspan !== 1 ? "mem_rowspan" : "") + "'>" + (this.memoryViews[row](bank, addr)) + "</td>"));
      }
      return $row;
    },
    showMem: function(cpu, rows) {
      var $row, $tbody, $thead, addr, mp, offset, row, sp, _i, _len, _ref;
      $tbody = $("#mem .tbody tbody");
      $tbody.empty();
      sp = cpu.regVal("sp");
      mp = cpu.regVal("mp");
      $thead = $("#mem .thead thead tr");
      $thead.empty();
      $thead.append($("<th class='mem_addr'>address</th>"));
      $thead.append($("<th class='mem_mp_offset'></th>"));
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        $thead.append($("<th class='mem_" + row + "'>" + row + "</th>"));
      }
      addr = 0;
      while (addr <= cpu.memSeen) {
        $row = this.memoryBankRow(cpu.mem, addr, rows);
        offset = mp !== -1 && (-8 < (_ref = addr - mp) && _ref < 8) ? addr === mp ? "mp" : addr < mp ? addr - mp : "+" + (addr - mp) : "";
        $row.prepend($("<td class='mem_mp_offset'>" + offset + "</td>"));
        $row.prepend($("<td class='mem_addr'>0x" + (addr.toString(16).padl('0', 8)) + "</td>"));
        $tbody.append($row);
        if (addr === mp) {
          $row.addClass("mp");
        }
        if (addr > sp) {
          $row.addClass("zombie_mem");
        }
        if (cpu.mem.written[addr]) {
          $row.addClass("ping-write");
        } else if (cpu.mem.read[addr]) {
          $row.addClass("ping-read");
        }
        addr++;
      }
      cpu.mem.written = {};
      return cpu.mem.read = {};
    },
    showRegs: function(cpu, rows) {
      var $row, $tbody, $thead, id, row, _i, _len, _ref;
      $tbody = $("#regs .tbody tbody");
      $tbody.empty();
      $thead = $("#regs .thead thead tr");
      $thead.empty();
      $thead.append($("<th class='mem_addr'>address</th>"));
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        $thead.append($("<th class='mem_" + row + "'>" + row + "</th>"));
      }
      id = 0;
      while (id < cpu.regCount) {
        $row = this.memoryBankRow(cpu.reg, id, rows);
        $row.prepend($("<td class='mem_addr'>" + ((_ref = cpu.regName(id)) != null ? _ref : "R" + id) + "</td>"));
        $tbody.append($row);
        if (cpu.reg.written[id]) {
          $row.addClass("ping-write");
        } else if (cpu.reg.read[id]) {
          $row.addClass("ping-read");
        }
        id++;
      }
      cpu.reg.written = {};
      return cpu.reg.read = {};
    },
    sourceChanged: function() {}
  };

}).call(this);

//# sourceMappingURL=view.map
